import asyncio
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
import random
from aiogram.filters import Command
from app.keyboard import story_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F, Router
from app.database.requests import update_all_stickers_by_username ,get_games_by_username, get_sticker_by_product, update_your_sticker_by_username, get_story
from aiogram.fsm.storage.memory import MemoryStorage

storage = MemoryStorage()
class Product(StatesGroup):
    product = State()


router = Router()

@router.callback_query(F.data.startswith("product_"))
async def buy_product(callback: CallbackQuery):
    product = callback.data.split("_")[1]
    sticker_data = await get_sticker_by_product(product)
    products = await get_story()
    games = await get_games_by_username(callback.from_user.username)
    if not games.all_stickers or product not in games.all_stickers.split(",") :
        if games.money >= sticker_data.sticker_price:
            if (games.all_stickers):
                # print(games.all_stickers)
                await update_all_stickers_by_username(username=callback.from_user.username, all_stickers=games.all_stickers+f",{product}", money=games.money-sticker_data.sticker_price)
                games = await get_games_by_username(callback.from_user.username)
                
                # if (len(games.all_stickers.split(",")) == len(products.all())):
                #     print("—ã—ã—ã")
                #     await callback.message.delete()
                #     await callback.message.answer("–í—ã –∫—É–ø–∏–ª–∏ –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞")
                # else:
                await callback.message.edit_text(F"–í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä - {sticker_data.sticker}", reply_markup=await story_keyboard(products=products, games=games))
                
            else:
                await update_all_stickers_by_username(username=callback.from_user.username, all_stickers=product, money=games.money-sticker_data.sticker_price)
                await update_your_sticker_by_username(username=callback.from_user.username, sticker=sticker_data.sticker)
                games = await get_games_by_username(callback.from_user.username)
                await callback.message.edit_text(F"–í—ã –∫—É–ø–∏–ª–∏ –ø–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä - {sticker_data.sticker}", reply_markup=await story_keyboard(products=products, games=games))
        else:
            await callback.message.edit_text('–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü§ë\n'
                                             F"–°–µ–π—á–∞—Å —É –≤–∞—Å {games.money}ü§ë")
    else:
        await callback.message.edit_text('–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ –≤—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä')
    
    
@router.callback_query(F.data.startswith("user_sticker_"))
async def buy_product(callback: CallbackQuery):
    product = callback.data.split("_")[2]
    sticker_data = await get_sticker_by_product(product)
    await update_your_sticker_by_username(username=callback.from_user.username, sticker=sticker_data.sticker)
    await callback.message.delete()
    await callback.message.answer(F"–í—ã –≤—ã–±—Ä–∞–ª–∏ {sticker_data.sticker} —Å—Ç–∏–∫–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–µ–∫—Ü–∏–∏")        

  

