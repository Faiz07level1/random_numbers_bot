import asyncio
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
import random
from aiogram.filters import Command
from app.keyboard import rate_keyboard, keyboard_1, my_inline_button, exchange_keyboard_ok, exchange_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F, Router
from app.database.requests import update_crystals_and_money_by_username, update_goblet_and_money_by_username, get_games_by_username

class Exchange(StatesGroup):
    ex_crystals = State()
    ex_goblet = State()
    exchange_on = State()

router = Router()

@router.callback_query(F.data=="exchange_ok")
async def exchange_ok(callback_data: CallbackQuery, state: FSMContext):
       data = await state.get_data()
       await state.clear()
       games = await get_games_by_username(callback_data.from_user.username)
       if data["exchange_on"] == "crystals":
           await update_crystals_and_money_by_username(callback_data.from_user.username, crystals=games.crystals-1, money=games.money+750)
           await callback_data.message.answer(F"–£ –≤–∞—Å –±—ã–ª–æ {games.crystals}üíé —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å {games.crystals-1}üíé\n"
                                              F"–£ –≤–∞—Å –±—ã–ª–æ {games.money}ü§ë —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å {games.money+750}ü§ë\n")
       if data["exchange_on"] == "wins":
           await update_goblet_and_money_by_username(callback_data.from_user.username, goblet=games.goblet-data["ex_goblet"], money=games.money+30*data["ex_goblet"])
           await callback_data.message.answer(F"–£ –≤–∞—Å –±—ã–ª–æ {games.goblet}üèÜ —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å {games.goblet-data['ex_goblet']}üèÜ\n"
                                              F"–£ –≤–∞—Å –±—ã–ª–æ {games.money}ü§ë —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å {games.money+30*data["ex_goblet"]}ü§ë\n")

@router.callback_query(F.data.startswith("exchange"))
async def exchange_message(callback_data: CallbackQuery, state: FSMContext):
    data_message = callback_data.data.split("_")[1]
    games = await get_games_by_username(callback_data.from_user.username)
    if data_message == "crystals":
        if games.crystals < 1:
            await callback_data.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ —É –≤–∞—Å 0üíé")
            await callback_data.message.answer("–≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –∫—É–±–∫–∏\n"
                                               "–Ω–∞–∂–º–∏—Ç–µ /exchange")
        else:
            await state.update_data(exchange_on=data_message)
            await callback_data.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±–º–µ–Ω –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª\n" 
                                            "–í—ã –º–µ–Ω—è–µ—Ç–µ 1üíé –Ω–∞ 750ü§ë")
            await callback_data.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –æ–±–º–µ–Ω\n"
                                    "–∏ –Ω–∞–∂–º–∏—Ç–µ –æ–±–º–µ–Ω –∏–ª–∏ –µ—Å–ª–∏ –≤—ã\n"
                                    "–ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", reply_markup=exchange_keyboard_ok)

    elif data_message == "wins":
        await state.update_data(exchange_on=data_message)
        await state.set_state(Exchange.ex_goblet)
        await callback_data.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±–º–µ–Ω –Ω–∞ –∫—É–±–∫–∏\n\n"
                                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫—É–±–∫–∏ –¥–ª—è –æ–±–º–µ–Ω–∞")
        
           

@router.message(Exchange.ex_goblet)
async def exchange_wins(message: Message, state: FSMContext):
    if message.text.isdigit() == False:
        await state.set_state(Exchange.ex_goblet)
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        
    else:
        await state.update_data(ex_goblet=int(message.text))
        data = await state.get_data()
        games = await get_games_by_username(message.from_user.username)
        if games.goblet < 1:
            await state.clear()
            await message.answer(F"–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ —É –≤–∞—Å –Ω–µ—Ç—É {data["ex_goblet"]} —Å–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å {games.goblet} –∫—É–±–∫–æ–≤")
            await message.answer("–≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª—ã\n"
                                               "–Ω–∞–∂–º–∏—Ç–µ /exchange")
        else:
            if data["ex_goblet"] > games.goblet:
                await state.set_state(Exchange.ex_goblet)
                await message.answer(F"–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ —É –≤–∞—Å –Ω–µ—Ç—É {data["ex_goblet"]}üèÜ —Å–µ–π—á–∞—Å –º–∞–∫—Å–∏–º—É–º —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ {games.goblet} –∫—É–±–∫–æ–≤")
                await message.answer(F"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")

            else:
                await state.update_data(ex_goblet=int(message.text))
                data = await state.get_data()
                if data["ex_goblet"] > 20:
                    await state.set_state(Exchange.ex_goblet)
                    await message.answer("–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 20-–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ\n"
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                if data["ex_goblet"] < 1:
                    await state.set_state(Exchange.ex_goblet)
                    await message.answer("–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1-–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ\n"
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                else:
                    await message.answer(F"–í—ã –º–µ–Ω—è–µ—Ç–µ {data["ex_goblet"]}üèÜ –Ω–∞ {data["ex_goblet"]*30}ü§ë")
                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –æ–±–º–µ–Ω\n"
                                        "–∏ –Ω–∞–∂–º–∏—Ç–µ –æ–±–º–µ–Ω –∏–ª–∏ –µ—Å–ª–∏ –≤—ã\n"
                                        "–ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", reply_markup=exchange_keyboard_ok)




