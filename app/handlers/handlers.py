import asyncio
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
import random
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F, Router
from app.keyboard import keyboard_1, my_keyboard, kb_builder, rate_keyboard, exchange_keyboard, story_keyboard, user_sticker
from app.database.requests import set_games, set_user, get_games_by_username, update_games_by_username, \
                                    update_in_games_by_username, get_games, update_attempts_by_username, update_crystals_by_username, get_ranks, get_story
from app.my_func import gamers_statistic, get_rank, rank_clasification

import datetime
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∏–≥—Ä–µ
ATTEMPTS = 6




# –°–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def get_random_number() -> int:
    return random.randint(1, 100)

router = Router()


class User(StatesGroup):
    secret_number = State()
    attempts = State()

# class Params(StatesGroup):
#     wb_api_token = State()
#     api_link = State()
#     client_comand = State()
#     params = State()
#     params_1 = State()
#     params_2 = State()
#     params_3 = State()
#     category_content = State()
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@router.message(F.text == "/start")
async def process_start_command(message: Message):
    await set_user(message.from_user.id, message.from_user.first_name, message.from_user.username)
    await set_games(username=message.from_user.username, in_game="False")
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç!\n–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"?\n\n'
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö '
        '–∫–æ–º–∞–Ω–¥ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help',
        reply_markup=keyboard_1
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(
        f'–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, '
        f'–∞ –≤–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ —É–≥–∞–¥–∞—Ç—å\n–£ –≤–∞—Å –µ—Å—Ç—å {ATTEMPTS} '
        f'–ø–æ–ø—ã—Ç–æ–∫\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ø—Ä–∞–≤–∏–ª–∞ '
        f'–∏–≥—Ä—ã –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/cancel - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã\n'
        f'/stat - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º?',
        reply_markup=keyboard_1
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/stat"
@router.message(Command(commands='stat'))
async def process_stat_command(message: Message):
    games = await get_games_by_username(message.from_user.username)
    ranks = await get_ranks()
    rank = await get_rank(wins=games.wins, ranks=ranks)
    await message.answer(
        f"–†–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞: {rank}\n\n"
        f'–í—Å–µ–≥–æ –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games.total_games}\n\n'
        f'–ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ: {games.wins}\n\n'
        f"–º–∞–Ω–∏–ø—É–ø—Å–∏–∫–æ–≤: {games.money}ü§ë\n\n"
        f"–∫—É–±–∫–æ–≤: {games.goblet}üèÜ\n\n"
        f"–∫—Ä–∏—Å—Ç–∞–ª–æ–≤: {games.crystals}üíé\n\n",
        reply_markup=keyboard_1
    )

@router.message(Command(commands='gamer'))
async def process_stat_command(message: Message):
    gamers = await get_games()

    ranks = await get_ranks()
    gamers_stat = await asyncio.create_task(gamers_statistic(gamers=gamers, ranks=ranks))
    await message.answer(gamers_stat, reply_markup=keyboard_1)

@router.message(Command(commands='my_stickers'))
async def process_stat_command(message: Message):
    gamers = await get_games()

    
    
    
    
    
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel"
@router.message(Command(commands='cancel'))
async def process_cancel_command(message: Message, state: FSMContext):
    games = await get_games_by_username(message.from_user.username)
    if games.in_game == "True":
        
        await update_games_by_username(username=message.from_user.username, total_games=games.total_games+1, wins=None, in_game="False", game_numbers=0, money=games.money)
        await update_attempts_by_username(username=message.from_user.username, attempts=0)
        await state.clear()
        await message.answer(
            '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å '
            '—Å–Ω–æ–≤–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º',
            reply_markup=keyboard_1
        )
    else:
        await message.answer(
            '–ê –º—ã –∏ —Ç–∞–∫ —Å –≤–∞–º–∏ –Ω–µ –∏–≥—Ä–∞–µ–º. '
            '–ú–æ–∂–µ—Ç, —Å—ã–≥—Ä–∞–µ–º —Ä–∞–∑–æ–∫?'
        )
        
        
@router.message(Command("rate"))
async def rate(message: Message):
    await message.answer("–í—ã –∑–∞—à–ª–∏ –Ω–∞ —Å—Ç–∞–≤–∫–∏\n"
                         "–ü—Ä–∞–≤–∏–ª–∞ —Å—Ç–∞–≤–æ–∫:\n"
                         "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –≤ –º–∞–Ω–∏–ø—É–ø—Å–∏–∫–∞—Ö\n"
                         "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É —Ç–æ –Ω–∞–∂–º–∏—Ç–µ —Å—Ç–∞–≤–∫–∞\n"
                         "–ï—Å–ª–∏ –∂–µ –≤—ã –∑–∞—Å—Å–∞–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å\n"
                         "–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ —Å—Ç–∞–≤–∫–∞ —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–Ω–∏–ø—É–ø—Å–∏–∫–æ–≤\n"
                         "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ 50\n"
                         "—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞\n"
                         "–ø—Ä–∏–∑ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–¥–∏–Ω –∫ –æ–¥–Ω–æ–º—É, –Ω—É –∏ –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –º–∏–Ω—É—Å—É–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞",
                         reply_markup=rate_keyboard)
    
@router.message(Command("ranks"))
async def rate(message: Message):
    ranks = await get_ranks()
    ranks_info = await rank_clasification(ranks=ranks)
    await message.answer(ranks_info)
    
@router.message(Command("exchange"))
async def rate(message: Message):
    await message.answer("–í—ã –∑–∞—à–ª–∏ –Ω–∞ –æ–±–º–µ–Ω\n"
                         "–ü—Ä–∞–≤–∏–ª–∞ –æ–±–º–µ–Ω–∞:\n"
                         "–≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∫—É–±–∫–∏ –∏–ª–∏ –∫—Ä–∏—Å—Ç–∞–ª—ã –Ω–∞ –º–∞–Ω–∏–ø—É–ø—Å–∏–∫–∏\n"
                         "1üíé —Ä–∞–≤–µ–Ω 750ü§ë –æ–¥–∏–Ω üèÜ —Ä–∞–≤–µ–Ω 30ü§ë\n"
                         "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –º–µ–Ω—è—Ç—å –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å",
                         reply_markup=exchange_keyboard)

@router.callback_query(F.data == "cancel")
async def cancel_all(callback_data: CallbackQuery):
    await callback_data.message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å\n"
                                          "–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤\n"
                                          "–∏–≥—Ä—É: —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ",
                                          reply_markup=keyboard_1)
    
@router.message(Command("story"))
async def rate(message: Message):
    products = await get_story()
    games = await get_games_by_username(username=message.from_user.username)
    await message.answer("–í—ã –∑–∞—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", reply_markup=await story_keyboard(products=products, games=games))

@router.message(Command("my_collection"))
async def rate(message: Message):
    products = await get_story()
    games = await get_games_by_username(username=message.from_user.username)
    if not games.all_stickers:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç—É —Å—Ç–∏–∫–µ—Ä–æ–≤")
    elif games.all_stickers and games.all_stickers.find(",") == -1:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–ª–µ–∫—Ü–∏—é\n"
                             "–Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å—Ç–∏–∫–µ—Ä–∞\n"
                             F"—Å–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å –æ–¥–∏–Ω —Å—Ç–∏–∫–µ—Ä - {games.sticker}")
    else:
        await message.answer("–í—ã –∑–∞—à–ª–∏ –≤ –≤–∞—à—É –∫–æ–ª–µ–∫—Ü–∏—é,\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å—Ç–∏–∫–µ—Ä", reply_markup=await user_sticker(products=products, all_stickers=games.all_stickers))



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É
@router.message(F.text.lower().in_(['–¥–∞', '–¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º', '—Å—ã–≥—Ä–∞–µ–º', '–∏–≥—Ä–∞',
                                '–∏–≥—Ä–∞—Ç—å', '—Ö–æ—á—É –∏–≥—Ä–∞—Ç—å']))
async def process_positive_answer(message: Message, state: FSMContext):
    games = await get_games_by_username(message.from_user.username)
    if games.in_game == "False":
        await update_in_games_by_username(username=message.from_user.username, in_game="True", game_numbers=get_random_number(), attempts=ATTEMPTS)
        await get_games_by_username(username=message.from_user.username)
        await message.answer(
            '–£—Ä–∞!\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, '
            '–ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!',
            reply_markup=my_keyboard.as_markup(resize_keyboard=True, input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        )
    else:
        await message.answer(
            '–ü–æ–∫–∞ –º—ã –∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —è –º–æ–≥—É '
            '—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100 '
            '–∏ –∫–æ–º–∞–Ω–¥—ã /cancel –∏ /stat'
        )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É
@router.message(F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ', '–Ω–µ —Ö–æ—á—É', '–Ω–µ –±—É–¥—É']))
async def process_negative_answer(message: Message):
    games = await get_games_by_username(message.from_user.username)
    if games.in_game == "False":
        await message.answer(
            '–ñ–∞–ª—å :(\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ '
            '–Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º'
        )
    else:
        await message.answer(
            '–ú—ã –∂–µ —Å–µ–π—á–∞—Å —Å –≤–∞–º–∏ –∏–≥—Ä–∞–µ–º. –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ, '
            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100'
        )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100
@router.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def process_numbers_answer(message: Message, state: FSMContext):
    games = await get_games_by_username(message.from_user.username)
    if games.in_game == "True":
        if int(message.text) == games.game_numbers:
            await update_games_by_username(username=message.from_user.username, total_games=games.total_games+1, wins=games.wins+1, in_game="False", game_numbers=0, money=games.money+(games.attempts-1)*10, goblet=games.goblet+1)
            await update_attempts_by_username(username=message.from_user.username, attempts=0)
            if games.attempts == 6:
                await update_crystals_by_username(username=message.from_user.username, crystals=games.crystals+1)

            await message.answer(
                F'–£—Ä–∞!!! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!\n\n'
                F"{F"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {(games.attempts-1)*10}ü§ë\n" if games.attempts==6 else F"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {(games.attempts-1)*10}ü§ë\n\n"}"
                F"{"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ 1üíé\n\n" if games.attempts==6 else ""}"
                '–ú–æ–∂–µ—Ç, —Å—ã–≥—Ä–∞–µ–º –µ—â–µ?',
                reply_markup=keyboard_1
            )
        else:
            await update_attempts_by_username(username=message.from_user.username, attempts=games.attempts-1)
            if games.attempts <= 1 and games.in_game == "True":
                if games.money>20 and games.goblet>1:
                    await update_games_by_username(username=message.from_user.username, total_games=games.total_games+1, wins=None, in_game="False", game_numbers=0, money=games.money-20, goblet=games.goblet-1)
                elif games.money>20 and games.goblet<1:
                    await update_games_by_username(username=message.from_user.username, total_games=games.total_games+1, wins=None, in_game="False", game_numbers=0, money=games.money-20, goblet=games.goblet)
                elif games.money<20 and games.goblet>1:
                    await update_games_by_username(username=message.from_user.username, total_games=games.total_games+1, wins=None, in_game="False", game_numbers=0, money=0, goblet=games.goblet-1)
                elif games.money<20 and games.goblet<1:
                    await update_games_by_username(username=message.from_user.username, total_games=games.total_games+1, wins=None, in_game="False", game_numbers=0, money=0, goblet=games.goblet)
                
                await message.answer(
                    f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å '
                    f'–ø–æ–ø—ã—Ç–æ–∫. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 20ü§ë - —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {games.money-20} :(\n\n–ú–æ–µ —á–∏—Å–ª–æ '
                    f'–±—ã–ª–æ {games.game_numbers}\n\n–î–∞–≤–∞–π—Ç–µ '
                    f'—Å—ã–≥—Ä–∞–µ–º –µ—â–µ?',
                    reply_markup=keyboard_1
                )
            elif int(message.text) > games.game_numbers:    

                await message.answer('–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ')
            elif int(message.text) < games.game_numbers:
                # await update_attempts_by_username(username=message.from_user.username, attempts=games.attempts-1)
                await message.answer('–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ')
            
    else:
        await message.answer('–ú—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ–º. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å?')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message()
async def process_other_answers(message: Message, state: FSMContext):
    games = await get_games_by_username(message.from_user.username)
    if games.in_game == "True":
        await message.answer(
            '–ú—ã –∂–µ —Å–µ–π—á–∞—Å —Å –≤–∞–º–∏ –∏–≥—Ä–∞–µ–º. '
            '–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100'
        )
    else:
        await message.answer(
            '–Ø –¥–æ–≤–æ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–æ—Ç, –¥–∞–≤–∞–π—Ç–µ '
            '–ø—Ä–æ—Å—Ç–æ —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?'
        )
