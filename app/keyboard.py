from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButtonPollType, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from app.database.models import Game_len, Story
keyboard_1 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º",)]], resize_keyboard=True, one_time_keyboard=True)

# buttons = [KeyboardButton(text=f'–ö–Ω–æ–ø–∫–∞ {i}') for i in range(1, 10)]
    

# # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –±—É–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# keyboard: list[list[KeyboardButton]] = [
#     [buttons[0]],
#     buttons[1:3],
#     buttons[3:6],
#     buttons[6:8],
#     [buttons[8]]
# ]

button: list[KeyboardButton] = [
    KeyboardButton(text=f'{i}') for i in range(1, 101)]

# # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
# buttons_2: list[KeyboardButton] = [
#     KeyboardButton(text=f'{i}') for i in range(31, 61)]
# buttons=[]

# keyboard = []
# for i in range(1, 101):
#     buttons.append(KeyboardButton(text=str(i)))
#     if not i % 12:
#         keyboard.append(buttons)
#         buttons = []
#     if i == 100:
#         keyboard.append(buttons)
#         buttons = []
my_keyboard = ReplyKeyboardBuilder()

# my_keyboard.row(*button)

my_keyboard.add(*[KeyboardButton(text=F"{i}") for i in range(1, 101)])
# my_keyboard.adjust(1, 3, 10, repeat=True)


kb_builder = ReplyKeyboardBuilder()

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
contact_btn = KeyboardButton(
    text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
    request_contact=True
)
geo_btn = KeyboardButton(
    text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
    request_location=True
)
poll_btn = KeyboardButton(
    text='–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å/–≤–∏–∫—Ç–æ—Ä–∏–Ω—É',
    request_poll=KeyboardButtonPollType()
)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –±–∏–ª–¥–µ—Ä
kb_builder.row(contact_btn, geo_btn, poll_btn, width=1)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard: ReplyKeyboardMarkup = kb_builder.as_markup(
    resize_keyboard=True,
    one_time_keyboard=True
)
exchange_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–æ–±–º–µ–Ω –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª—ã üíé", callback_data="exchange_crystals")],
                                                           [InlineKeyboardButton(text="–æ–±–º–µ–Ω –Ω–∞ –∫—É–±–∫–∏ üèÜ", callback_data="exchange_wins")],
                                                             [InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancel")]])

async def story_keyboard(products, games) -> InlineKeyboardMarkup:
    arr = []
    kb_builder = InlineKeyboardBuilder()
    products_arr = list()
    print(games.all_stickers.find(",") > -1)
    for p in products:
        if not games.all_stickers or games.all_stickers.find(",") ==-1:
            if p.sticker_name != games.all_stickers:
                print(p.sticker_name)
                products_arr.append(p)
        if games.all_stickers.find(",") > -1:
            print(games.all_stickers, p.sticker_name)    
            if (p.sticker_name not in games.all_stickers.split(",")):
                products_arr.append(p)
    print("|")
    for p in products_arr:
        arr.append(InlineKeyboardButton(text=F"{p.sticker} - {p.sticker_price}ü§ë", callback_data=F"product_{p.sticker_name}"))
    kb_builder.row(*arr, width=2)
    return kb_builder.as_markup()


async def user_sticker(products, all_stickers):
    arr = []
    kb_builder = InlineKeyboardBuilder()
    
    products_arr = list()
    for p in products:
          
        if (p.sticker_name in all_stickers.split(",")):
                products_arr.append(p)
    for p in products_arr:
        arr.append(InlineKeyboardButton(text=F"{p.sticker}", callback_data=F"user_sticker_{p.sticker_name}"))
    kb_builder.row(*arr, width=2)
    return kb_builder.as_markup()



rate_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="—Å—Ç–∞–≤–∫–∞", callback_data="rate"),
                                                        InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancel")]])

exchange_keyboard_ok = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–æ–±–º–µ–Ω", callback_data="exchange_ok"),
                                                        InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancel")]])

my_inline_button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üóø", callback_data="rock"),
                                                          InlineKeyboardButton(text="‚úÇÔ∏è", callback_data="scissors"),
                                                          InlineKeyboardButton(text="üìÉ", callback_data="paper")]])
# # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –±—É–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# keyboard: list[list[KeyboardButton]] = [buttons_1,
#                                         buttons_2]

# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
# my_keyboard = ReplyKeyboardMarkup(
#     keyboard=keyboard,
#     resize_keyboard=True
# )


# url_button_1 = InlineKeyboardButton(
#     text='–ö—É—Ä—Å "–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—ã –Ω–∞ Python –∏ AIOgram"',
#     url='https://stepik.org/120924'
# )
# url_button_2 = InlineKeyboardButton(
#     text='–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram Bot API',
#     url='https://core.telegram.org/bots/api'
# )
# # url_button_3 = InlineKeyboardButton(
# #     text='–°—Å—ã–ª–∫–∞ –Ω–∞ –ú–∞–∫—Å–∏–º–∞',
# #     url='tg://user?id=6119385873'
# # )

# url_button_3 = InlineKeyboardButton(
#     text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
#     url="tg://resolve?domain=umnie_roditeli"
# )

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# keyboard_url = InlineKeyboardMarkup(
#     inline_keyboard=[[url_button_1],
#                      [url_button_2],
#                      [url_button_3]]
# )

